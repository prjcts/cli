#!/bin/bash

set -euo pipefail

CONFIG_DIR="$HOME/.local/share/prjcts"
VERSION_FILE="$CONFIG_DIR/version"
VERSION=$(cat "$VERSION_FILE" 2>/dev/null || echo "0.1.0")
DIRS_FILE="$CONFIG_DIR/dirs"
TRIGGERS_FILE="$CONFIG_DIR/triggers"
COMMAND_FILE="$CONFIG_DIR/command"

cmd_help() {
  cat <<EOF
Usage: dev [command] [options]

Commands:

  dev                             Launch project picker and open with configured command

  dev help                        Show this help message
  dev version, -v, --version      Show the current version

  dev add                         Add a project directory (default)
  dev add -t, --triggers          Add a project trigger (e.g. .git)
  dev add -d, --directories       Add a project directory
  dev clean                       Remove a project directory (default)
  dev clean -t, --triggers        Remove a trigger
  dev clean -d, --directories     Remove a project directory
  dev set -c, --command           Set the launch command (e.g. nvim, code)
  dev show command                Show the current launch command
  dev triggers                    Open the trigger list for manual editing
  dev directories                 Open the project directory list for manual editing

  dev uninstall [--no-source]     Remove dev CLI, config, and shell function
EOF
}

cmd_main() {
  if [[ ! -s "$DIRS_FILE" ]]; then
    echo "‚ùå No project directories configured." >&2
    echo "üí° Run: dev add" >&2
    exit 1
  fi

  if [[ ! -s "$COMMAND_FILE" ]]; then
    echo "‚ùå No launch command set." >&2
    echo "üí° Run: dev set -c" >&2
    exit 1
  fi

  if [[ ! -s "$TRIGGERS_FILE" ]]; then
    echo "‚ùå No project triggers configured." >&2
    echo "üí° Run: dev add -t" >&2
    exit 1
  fi

  local -a triggers=()
  while IFS= read -r line || [[ -n "$line" ]]; do
    triggers+=("$line")
  done < "$TRIGGERS_FILE"

  find_projects() {
    while IFS= read -r root; do
      [[ -d "$root" ]] || continue
      for trigger in "${triggers[@]}"; do
        [[ -e "$root/$trigger" ]] && echo "$root" && break
      done
      find "$root" -mindepth 1 -maxdepth 1 -type d 2>/dev/null | while read -r dir; do
        for trigger in "${triggers[@]}"; do
          [[ -e "$dir/$trigger" ]] && echo "$dir" && break
        done
      done
    done < "$DIRS_FILE"
  }

  find_projects | sort -u | fzf --prompt="Select project: "
}

cmd_add() {
  local mode="directories"
  case "${1:-}" in
    -t|--triggers) mode="triggers" ;;
    -d|--directories|'') ;;
    *) echo "Invalid option for 'add'" >&2; exit 1 ;;
  esac

  if [[ "$mode" == "directories" ]]; then
    read -r -e -p "Enter a directory to add: " input_dir
    [[ -z "$input_dir" ]] && { echo "Canceled." >&2; return; }
    proj_dir=$(eval echo "$input_dir")
    proj_dir="${proj_dir%/}"
    [[ ! -d "$proj_dir" ]] && { echo "Directory does not exist: $proj_dir" >&2; return; }
    grep -Fxq "$proj_dir" "$DIRS_FILE" 2>/dev/null || echo "$proj_dir" >> "$DIRS_FILE"
    echo "Added." >&2
  else
    read -r -e -p "Enter a trigger file to add (e.g., .git): " trigger
    [[ -z "$trigger" ]] && { echo "Canceled." >&2; return; }
    grep -Fxq "$trigger" "$TRIGGERS_FILE" 2>/dev/null || echo "$trigger" >> "$TRIGGERS_FILE"
    echo "Added." >&2
  fi
}

cmd_clean() {
  local mode="directories"
  case "${1:-}" in
    -t|--triggers) mode="triggers" ;;
    -d|--directories|'') ;;
    *) echo "Invalid option for 'clean'" >&2; exit 1 ;;
  esac

  local target_file
  [[ "$mode" == "directories" ]] && target_file="$DIRS_FILE" || target_file="$TRIGGERS_FILE"

  local -a map=()
  [[ -f "$target_file" ]] && while IFS= read -r line || [[ -n "$line" ]]; do map+=("$line"); done < "$target_file"
  (( ${#map[@]:-0} == 0 )) && { echo "No entries to clean." >&2; return; }

  echo "Saved $mode:" >&2
  for i in "${!map[@]}"; do echo "$((i+1)). ${map[$i]}" >&2; done

  echo "" >&2
  read -rp "Enter number to remove (or leave blank to cancel): " choice
  if [[ "$choice" =~ ^[0-9]+$ && "$choice" -ge 1 && "$choice" -le ${#map[@]} ]]; then
    unset 'map[choice-1]'
    printf "%s\n" "${map[@]}" > "$target_file"
    echo "Removed." >&2
  else
    echo "Canceled." >&2
  fi
}

cmd_set() {
  case "${1:-}" in
    -c|--command)
      read -r -e -p "Enter the launch command (e.g. nvim, code): " editor_cmd
      [[ -z "$editor_cmd" ]] && { echo "Canceled." >&2; return; }
      echo "$editor_cmd" > "$COMMAND_FILE"
      echo "Set launch command to: $editor_cmd"
      ;;
    *) echo "Invalid option for 'set'" >&2; exit 1 ;;
  esac
}

cmd_show() {
  case "${1:-}" in
    command) [[ -s "$COMMAND_FILE" ]] && echo "Current launch command: $(<"$COMMAND_FILE")" || echo "No launch command set." ;;
    *) echo "Unknown 'show' option. Try: dev show command" ;;
  esac
}

cmd_version() {
  echo "dev version: $VERSION"
}

cmd_triggers() {
  ${EDITOR:-nvim} "$TRIGGERS_FILE"
}

cmd_directories() {
  ${EDITOR:-nvim} "$DIRS_FILE"
}

cmd_uninstall() {
  echo "Uninstalling dev CLI..."
  rm -f "$HOME/.local/bin/dev-cli"
  rm -rf "$CONFIG_DIR"
  for rc_file in "$HOME/.zshrc" "$HOME/.bashrc" "$HOME/.profile"; do
    [[ -f "$rc_file" ]] && sed -i.bak '/function dev()/,/^}/d' "$rc_file"
  done
  echo "‚úÖ Uninstall complete."
}

cmd_doctor() {
  echo "üîç Running dev doctor..."
  [[ -f "$VERSION_FILE" ]] && echo "‚úî Version file: $(<"$VERSION_FILE")" || echo "‚ùå No version file"
  [[ -s "$COMMAND_FILE" ]] && echo "‚úî Launch command: $(<"$COMMAND_FILE")" || echo "‚ùå No launch command"
  [[ -s "$DIRS_FILE" ]] && echo "‚úî Project directories configured" || echo "‚ùå No directories"
  [[ -s "$TRIGGERS_FILE" ]] && echo "‚úî Triggers configured" || echo "‚ùå No triggers"
  command -v fzf >/dev/null && echo "‚úî fzf found" || echo "‚ùå fzf not found"
}

case "${1:-}" in
  -h|--help|help) cmd_help ;;
  -v|--version|version) cmd_version ;;
  add) shift; cmd_add "$@" ;;
  clean) shift; cmd_clean "$@" ;;
  set) shift; cmd_set "$@" ;;
  show) shift; cmd_show "$@" ;;
  uninstall) shift || true; cmd_uninstall "$@" ;;
  triggers) cmd_triggers ;;
  directories) cmd_directories ;;
  doctor) cmd_doctor ;;
  *) cmd_main ;;
esac
